---
import * as UI from '@semantic-ui/core';
import * as SpecExports from '@semantic-ui/specs';
import { CodeExample } from '@components/CodeExample/CodeExample.js';

const { specName, plural } = Astro.props;

const { SpecReader, ...Specs } = SpecExports;

const spec = Specs[specName];
const componentSpec = new SpecReader(spec, {plural});

const componentName = componentSpec.getComponentName();

const Component = UI[componentName];

const componentDefinition = componentSpec.getDefinition();
---
<h2>Types</h2>
{componentDefinition.types.map((type) => (
  <>
    {type.examples.map((example, index) => (
      <>
        <CodeExample client:load
          title={(index == 0) ? type.title : undefined }
          description={type.description}
          code={example.code}
        >
          <Component {...example.codeParts.attributes}>
            <Fragment set:html={example.codeParts.html} />
          </Component>
        </CodeExample>
      </>
    ))}
  </>
))}
<h2>States</h2>
{componentDefinition.states.map((type) => (
  <>
    {type.examples.map((example, index) => (
      <>
        <CodeExample client:load
          title={(index == 0) ? type.title : undefined }
          description={(index == 0) ? type.description : undefined }
          code={example.code}
        >
          <Component {...example.codeParts.attributes}>
            <Fragment set:html={example.codeParts.html} />
          </Component>
        </CodeExample>
      </>
    ))}
  </>
))}
<h2>Variations</h2>
{componentDefinition.variations.map((type) => (
  <>
    {type.examples.map((example, index) => (
      <>
        <CodeExample client:load
          title={(index == 0) ? type.title : undefined }
          description={(index == 0) ? type.description : undefined }
          code={example.code}
        >
          <Component {...example.codeParts.attributes}>
            <Fragment set:html={example.codeParts.html} />
          </Component>
        </CodeExample>
      </>
    ))}
  </>
))}