---
import { getCollection } from 'astro:content';
import { each, toTitleCase, inArray, toTitleCase } from '@semantic-ui/utils';
import Definition from '@layouts/Definition.astro';
import SpecDefinition from '@components/SpecDefinition.astro';
import * as SpecExports from '@semantic-ui/specs';

const { entry, tab } = Astro.props;
export async function getStaticPaths() {
  const entries = await getCollection('components');
  const paths = [];
  each(entries, entry => {
    paths.push({
      params: { slug: `${entry.slug}` },
      props: { entry }
    });
    each(entry.data.tabs, tab => {
      paths.push({
        params: { slug: `${entry.slug}/${tab}` },
        props: { entry, tab }
      });
    });
  });
  return paths;
}

const data = entry.data;
const displayedTab = tab || data.tabs[0];
const plural = (displayedTab == 'plural');
const definitionDisplayed = inArray(displayedTab, ['singular', 'plural']);

const { SpecReader, ...Specs } = SpecExports;
const spec = Specs[data.specName];
const componentSpec = new SpecReader(spec, { plural });
const componentName = componentSpec.getComponentName();
const definition = componentSpec.getDefinition();


const searchMeta = {
  title: data.title,
  description: data.description,
  pageType: 'UI Components',
  tags: data.tags,
  tab: toTitleCase(displayedTab)
};

const menu = data.tabs.map(tab => ({
  text: toTitleCase(tab),
  url: `/ui/${entry.slug}/${tab}`,
}));

let railMenu = [];
if(definitionDisplayed) {
  railMenu = componentSpec.getDefinitionMenu();
}
---
<Definition
  title={data.title}
  description={data.description}
  searchMeta={searchMeta}
  menu={menu}
  railMenu={railMenu}
  id={data.id}
>
  {definitionDisplayed && (
    <SpecDefinition
      definition={definition}
      componentName={componentName}
      spec={spec}
      plural={plural}
    />
  )}
  {displayedTab === 'spec' && (
    <p>Spec goes here</p>
  )}
</Definition>
