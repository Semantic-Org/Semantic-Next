/**
 * Script to rewrite imports in package files to use absolute CDN URLs
 * 
 * This allows bare imports like 'import { html } from "lit"' to work
 * without needing explicit importmap entries for every nested dependency.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { build } from 'esbuild';
import { glob } from 'glob';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Access environment variables
const version = process.env.VERSION;
const cdnUrl = process.env.CDN_URL || 'https://cdn.semantic-ui.com';

// Target directory to process
const argv = process.argv.slice(2);
const targetDir = argv[0];

if (!targetDir) {
  console.error('No target directory specified');
  process.exit(1);
}

// Validate directories exist
if (!fs.existsSync(targetDir)) {
  console.error(`Target directory does not exist: ${targetDir}`);
  process.exit(1);
}

// Config
const tmpDir = path.join(process.cwd(), 'tmp-cdn-build');

// Ensure tmp dir exists
if (!fs.existsSync(tmpDir)) {
  fs.mkdirSync(tmpDir, { recursive: true });
}

// Get package info from directory path
function getPackageInfo(filePath) {
  // Extract package info from path
  // Expected format: cdn/@scope/package/version/...
  const parts = filePath.split(path.sep);
  const cdnIndex = parts.findIndex(part => part === 'cdn');
  
  if (cdnIndex === -1 || parts.length < cdnIndex + 4) {
    return null;
  }
  
  const scope = parts[cdnIndex + 1].startsWith('@') ? parts[cdnIndex + 1] : null;
  const packageName = scope ? parts[cdnIndex + 2] : parts[cdnIndex + 1];
  const packageVersion = scope ? parts[cdnIndex + 3] : parts[cdnIndex + 2];
  
  return {
    scope,
    packageName,
    packageVersion,
    fullName: scope ? `${scope}/${packageName}` : packageName
  };
}

// Extract the root path of a package from a file path
function extractPackageRootPath(filePath, packageInfo) {
  // Extract the root package directory path for a given file
  // Expected format: cdn/@scope/package/version/...
  if (!packageInfo) return null;
  
  const parts = filePath.split(path.sep);
  const cdnIndex = parts.findIndex(part => part === 'cdn');
  
  if (cdnIndex === -1) return null;
  
  let packagePathLength;
  if (packageInfo.scope) {
    // @scope/package/version - need 3 parts after cdn
    packagePathLength = cdnIndex + 4;
  } else {
    // package/version - need 2 parts after cdn
    packagePathLength = cdnIndex + 3;
  }
  
  if (parts.length < packagePathLength) return null;
  
  return parts.slice(0, packagePathLength).join(path.sep);
}

// Detects if a file is likely ESM or CommonJS
function detectModuleFormat(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    
    // Look for ESM indicators
    const hasImportExport = /\b(import|export)\b/.test(content);
    const hasModuleExports = /\b(module\.exports|exports\.\w+)\b/.test(content);
    const hasRequire = /\brequire\s*\(/.test(content);
    
    // If the file has import/export statements, it's likely ESM
    if (hasImportExport && !hasModuleExports) {
      return 'esm';
    }
    
    // If it has module.exports or require, it's likely CommonJS
    if ((hasModuleExports || hasRequire) && !hasImportExport) {
      return 'commonjs';
    }
    
    // If it has both or neither, prefer ESM for .mjs files, otherwise default to ESM
    if (filePath.endsWith('.mjs')) {
      return 'esm';
    }
    
    // Default to ESM for modern packages
    return 'esm';
  } catch (error) {
    console.error(`Error detecting module format for ${filePath}:`, error);
    // Default to ESM if detection fails
    return 'esm';
  }
}

// Rewrite imports in a file
async function rewriteFile(filePath) {
  try {
    // Skip non-JS files
    if (!filePath.endsWith('.js') && !filePath.endsWith('.mjs')) {
      return;
    }

    // Get package info from file path
    const packageInfo = getPackageInfo(filePath);
    if (!packageInfo) {
      console.warn(`Could not determine package info for ${filePath}`);
      return;
    }

    // Detect module format
    const format = detectModuleFormat(filePath);
    console.log(`Detected ${format} format for ${path.basename(filePath)}`);

    // Generate output file path (preserving directory structure)
    const relativePath = path.relative(targetDir, filePath);
    const outputPath = path.join(tmpDir, relativePath);
    
    // Ensure output directory exists
    fs.mkdirSync(path.dirname(outputPath), { recursive: true });

    console.log(`Setting up esbuild for file: ${filePath}`);
    console.log(`Output path: ${outputPath}`);
    console.log(`Module format: ${format}`);
    
    // Use esbuild to transform the file
    await build({
      entryPoints: [filePath],
      outfile: outputPath,
      bundle: false,
      format: format, // Use the detected format (esm or commonjs)
      write: true,
      logLevel: 'info', // Increase log level for debugging
      plugins: [
        {
          name: 'cdn-url-plugin',
          setup(build) {
            // Handle bare imports by rewriting to CDN URLs
            build.onResolve({ filter: /^[^./]/ }, args => {
              console.log(`onResolve called with path: ${args.path}, importer: ${args.importer}`);
              
              // Skip builtin Node.js modules
              if (args.path.startsWith('node:')) {
                console.log(`Skipping node: module: ${args.path}`);
                return;
              }
              
              let importPath = args.path;
              console.log(`Processing import: ${importPath}`);
              
              // Handle submodule imports (e.g., lit/directive.js)
              const parts = importPath.split('/');
              const pkgName = parts[0].startsWith('@') ? `${parts[0]}/${parts[1]}` : parts[0];
              const subPath = parts[0].startsWith('@') ? parts.slice(2).join('/') : parts.slice(1).join('/');
              console.log(`Parsed import: package=${pkgName}, subPath=${subPath || '(none)'}`);
              
              // Determine the version to use for the import based on package.json dependencies
              let importVersion;
              
              // Helper to get dependency version from package.json
              const getDependencyVersion = (pkgJsonPath, dependencyName) => {
                try {
                  if (fs.existsSync(pkgJsonPath)) {
                    const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf-8'));
                    
                    // Check different dependency types
                    const depTypes = ['dependencies', 'devDependencies', 'peerDependencies'];
                    for (const type of depTypes) {
                      if (pkgJson[type] && pkgJson[type][dependencyName]) {
                        let version = pkgJson[type][dependencyName];
                        // Clean up version string (remove ^, ~, etc.)
                        version = version.replace(/^[\^~>=<]/, '');
                        return version;
                      }
                    }
                  }
                } catch (e) {
                  console.error(`Error reading dependency from ${pkgJsonPath}:`, e.message);
                }
                return null;
              };
              
              // Try to get the original package.json for the current file
              let originalPackageJsonPath;
              
              if (args.importer) {
                // If we have the importer path, look in its directory
                originalPackageJsonPath = path.join(path.dirname(args.importer), 'package.json');
              } else {
                // Fall back to the package's root package.json
                const pkgRootPath = extractPackageRootPath(filePath, packageInfo);
                if (pkgRootPath) {
                  originalPackageJsonPath = path.join(pkgRootPath, 'package.json');
                } else {
                  // Last resort - just use the file's directory
                  originalPackageJsonPath = path.join(path.dirname(filePath), 'package.json');
                }
              }
              
              let dependencyVersion = null;
              
              // Special handling for @semantic-ui packages
              if (pkgName.startsWith('@semantic-ui/')) {
                // For @semantic-ui packages, first try to get dependency version from package.json
                dependencyVersion = getDependencyVersion(originalPackageJsonPath, pkgName);
                
                if (!dependencyVersion) {
                  // If not found in package.json, all @semantic-ui packages should use the same version
                  dependencyVersion = packageInfo.packageVersion;
                }
                
                importVersion = dependencyVersion;
              } else {
                // For external packages like lit, first check the package.json
                dependencyVersion = getDependencyVersion(originalPackageJsonPath, pkgName);
                
                // Special handling for lit packages - use LIT_VERSION if available
                if (!dependencyVersion && 
                    (pkgName === 'lit' || pkgName === 'lit-html' || pkgName === 'lit-element' || 
                    pkgName.startsWith('@lit/'))) {
                  if (process.env.LIT_VERSION) {
                    dependencyVersion = process.env.LIT_VERSION;
                  }
                }
                
                // If we found a dependency version, use it
                if (dependencyVersion) {
                  importVersion = dependencyVersion;
                } else {
                  // Fallback to the current package version if we can't determine the dependency version
                  console.warn(`Could not determine version for ${pkgName}, using package version ${packageInfo.packageVersion}`);
                  importVersion = packageInfo.packageVersion;
                }
              }
              
              // Build the CDN URL
              let cdnImportPath = `${cdnUrl}/${pkgName}/${importVersion}`;
              
              if (subPath) {
                cdnImportPath += `/${subPath}`;
              } else {
                // Default to index.js if no subpath
                cdnImportPath += '/index.js';
              }
              
              console.log(`Rewriting import: ${importPath} → ${cdnImportPath}`);
              
              return {
                path: cdnImportPath,
                external: true
              };
            });
          }
        }
      ],
      logLevel: 'warning'  // Reduce noise in logs
    });

    console.log(`Processed: ${filePath} -> ${outputPath}`);
    
    // Copy the output back to the original location
    fs.copyFileSync(outputPath, filePath);
    
  } catch (error) {
    console.error(`Error processing ${filePath}:`, error);
  }
}

// Process all JS files in the target directory
async function processDirectory() {
  try {
    console.log(`Starting processDirectory with target: ${targetDir}`);
    
    // Ensure the directory is absolute
    const absoluteTargetDir = path.resolve(targetDir);
    console.log(`Absolute target directory: ${absoluteTargetDir}`);
    
    // Check if directory exists
    if (!fs.existsSync(absoluteTargetDir)) {
      console.error(`ERROR: Target directory does not exist: ${absoluteTargetDir}`);
      return;
    }
    
    console.log(`Looking for JS files in: ${absoluteTargetDir}`);
    
    // Find all JS files (ensure we're handling .mjs files too)
    const jsFiles = glob.sync('**/*.{js,mjs}', { 
      cwd: absoluteTargetDir,
      absolute: true
    });
    
    console.log(`Glob pattern used: **/*.{js,mjs}`);
    console.log(`Files found by glob: ${jsFiles.length}`);
    
    console.log(`Found ${jsFiles.length} JS files to process in ${absoluteTargetDir}`);
    
    if (jsFiles.length === 0) {
      console.warn(`No JS files found in ${absoluteTargetDir}. Check if the directory is correct.`);
      return; // Exit early if no files found
    }
    
    // Log the first few files to help with debugging
    console.log("Sample files to process:");
    jsFiles.slice(0, 3).forEach(file => console.log(`  - ${file}`));
    
    // Process files in parallel with a concurrency limit
    const concurrency = 10;
    let processedCount = 0;
    
    for (let i = 0; i < jsFiles.length; i += concurrency) {
      const batch = jsFiles.slice(i, i + concurrency);
      await Promise.all(batch.map(async file => {
        await rewriteFile(file);
        processedCount++;
      }));
      
      // Log progress for large directories
      if (jsFiles.length > 20 && (i + concurrency) % 50 === 0) {
        console.log(`Processed ${processedCount}/${jsFiles.length} files...`);
      }
    }
    
    console.log(`Import rewriting completed. Processed ${processedCount} files.`);
  } catch (error) {
    console.error('Error processing directory:', error);
    process.exit(1);
  } finally {
    // Clean up tmp directory
    fs.rmSync(tmpDir, { recursive: true, force: true });
  }
}

// Run the script
processDirectory();
