/**
 * Script to create a development version of the importmap
 * Usage: node create-dev-importmap.js [version]
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get version from environment variable or command line
const version = process.env.VERSION || process.argv[2];

if (!version) {
  console.error('No version provided');
  process.exit(1);
}

const litVersion = process.env.LIT_VERSION;

try {
  // Read the production importmap
  const importmapPath = path.join('./cdn', `importmap-${version}.json`);
  const importmapText = fs.readFileSync(importmapPath, 'utf8');
  const importmap = JSON.parse(importmapText);
  
  // Create a development version by modifying paths for all entries
  const devImportmap = {
    imports: {}
  };

  // Process each import and replace with development version if available
  for (const [key, value] of Object.entries(importmap.imports)) {
    // For Lit modules
    if (key === 'lit' || value.includes(`/lit/${litVersion}/`)) {
      devImportmap.imports[key] = value.replace(`/lit/${litVersion}/`, `/lit/${litVersion}/development/`);
    }
    // For @semantic-ui packages
    else if (key.startsWith('@semantic-ui/')) {
      const parts = key.split('/');
      const packageName = parts[1];
      const packageVersion = value.match(/\/@semantic-ui\/[^\/]+\/([^\/]+)/)[1];

      // Update to use development folder if it exists
      devImportmap.imports[key] = value.replace(
        `/@semantic-ui/${packageName}/${packageVersion}/`,
        `/@semantic-ui/${packageName}/${packageVersion}/development/`
      );
    }
    // For Lit dependencies and other packages
    else {
      // Attempt to add /development/ to path if it's a dependency
      const match = value.match(/\/([^\/]+)\/([^\/]+)\/([^\/]+)/);
      if (match) {
        const [, packageName, packageVersion, entry] = match;
        devImportmap.imports[key] = value.replace(
          `/${packageName}/${packageVersion}/`,
          `/${packageName}/${packageVersion}/development/`
        );
      } else {
        // If we can't determine structure, just copy as-is
        devImportmap.imports[key] = value;
      }
    }
  }

  // Write the development importmap
  fs.writeFileSync(path.join('./cdn', `importmap-${version}-dev.json`), JSON.stringify(devImportmap, null, 2));
  console.log(`Created importmap-${version}-dev.json`);

  // If this is not a pre-release, also update the latest-dev.json
  if (!version.includes('-')) {
    fs.writeFileSync(path.join('./cdn', 'importmap-latest-dev.json'), JSON.stringify(devImportmap, null, 2));
    console.log('Updated importmap-latest-dev.json');
  } else if (!fs.existsSync(path.join('./cdn', 'importmap-latest-dev.json'))) {
    // If latest-dev doesn't exist yet, create it
    fs.writeFileSync(path.join('./cdn', 'importmap-latest-dev.json'), JSON.stringify(devImportmap, null, 2));
    console.log('Created initial importmap-latest-dev.json');
  }

  // Log the final imports for verification
  console.log('Final development importmap imports:');
  console.log(JSON.stringify(devImportmap.imports, null, 2));
} catch (err) {
  console.error('Error creating development importmap:', err.message);
  process.exit(1);
}
