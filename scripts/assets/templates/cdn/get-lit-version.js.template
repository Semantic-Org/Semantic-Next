/**
 * Script to extract the Lit version from dependencies
 * Tries multiple sources in order of specificity
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// First try from package-lock.json
let litVersion;
try {
  const lockfileText = fs.readFileSync('./package-lock.json', 'utf8');
  const lockfile = JSON.parse(lockfileText);
  const rendererPath = './node_modules/@semantic-ui/renderer';

  if (lockfile.packages && lockfile.packages[rendererPath]) {
    const rendererPkg = lockfile.packages[rendererPath];
    if (rendererPkg.dependencies && rendererPkg.dependencies.lit) {
      litVersion = rendererPkg.dependencies.lit;
      litVersion = litVersion.replace(/[^0-9.]/g, '');
    }
  }
} catch (e) {
  // Silent catch - try next source
}

// Fallback to package.json in renderer package
if (!litVersion) {
  try {
    const rendererPkgText = fs.readFileSync('./packages/renderer/package.json', 'utf8');
    const rendererPkg = JSON.parse(rendererPkgText);
    if (rendererPkg.dependencies && rendererPkg.dependencies.lit) {
      litVersion = rendererPkg.dependencies.lit;
      litVersion = litVersion.replace(/[^0-9.]/g, '');
    }
  } catch (e) {
    // Silent catch - try next source
  }
}

// Final fallback to installed version
if (!litVersion) {
  try {
    const litPkgPath = path.join('./node_modules/lit/package.json');
    if (fs.existsSync(litPkgPath)) {
      const litPkgText = fs.readFileSync(litPkgPath, 'utf8');
      const litPkg = JSON.parse(litPkgText);
      litVersion = litPkg.version;
    }
  } catch (e) {
    // Silent catch
  }
}

if (!litVersion) {
  console.error('Could not determine Lit version from any source');
  process.exit(1);
}

// Output the version
console.log(litVersion);
