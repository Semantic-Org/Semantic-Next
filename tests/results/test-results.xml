<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="186" failures="1" errors="0" time="2.49">
    <testsuite name="packages/templating/test/compiler.test.js" timestamp="2024-02-13T16:45:46.089Z" hostname="VM" tests="21" failures="0" errors="0" skipped="0" time="0.03">
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; should compile a template" time="0.002">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; expressions &gt; should compile basic expressions" time="0.01">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; expressions &gt; should compile html expressions with triple brackets" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; expressions &gt; should preserve boolean values" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should compile a template with an if conditional" time="0">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should preserve boolean values in conditionals" time="0">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should preserve numerical values" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should preserve string values in conditionals" time="0">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should handle elseif conditionals" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should support multiple elseif conditonals" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should support nested conditionals in else if" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should handle else conditionals" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should handle nested conditionals with 2 levels" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; conditionals &gt; should handle nested conditionals with 3 levels" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; each loops &gt; should compile a template with an each loop" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; each loops &gt; should compile a template with an each loop and an iterateAs" time="0">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; each loops &gt; should compile a template with an if condition inside an each loop" time="0.002">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; template partials &gt; should compile a template with a partial" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; template partials &gt; should compile a template with a partial and data" time="0">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; template partials &gt; should compile a template with a partial and reactive data" time="0.003">
        </testcase>
        <testcase classname="packages/templating/test/compiler.test.js" name="TemplateCompiler &gt; slots &gt; should compile a template with a slot" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/templating/test/scanner.test.js" timestamp="2024-02-13T16:45:46.098Z" hostname="VM" tests="8" failures="1" errors="0" skipped="0" time="0.016">
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should let you consume a regex" time="0.002">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should let you consume a string" time="0">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should return the rest of a string with rest" time="0">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should consume until a given string" time="0.001">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should permit peeking at a character" time="0">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should let you returnTo the first previous instance of pattern" time="0">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should let you log errors with fatal" time="0.002">
        </testcase>
        <testcase classname="packages/templating/test/scanner.test.js" name="Scanner &gt; should let you check if the scanner is at the end of the input" time="0.011">
            <failure message="expected true to be false // Object.is equality" type="AssertionError">
AssertionError: expected true to be false // Object.is equality
 ‚ùØ packages/templating/test/scanner.test.js:56:33
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="packages/utils/test/utils.test.js" timestamp="2024-02-13T16:45:46.104Z" hostname="VM" tests="82" failures="0" errors="0" skipped="0" time="0.068">
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; unique should remove duplicates" time="0.002">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; filterEmpty should remove falsey values" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; last should return the last n elements" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; firstMatch should return the first matching element based on callback" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; findIndex should return the index of the first matching element" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; remove should remove elements based on a callback or value" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; inArray should check if a value is in the array" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Array Utilities &gt; range should create an array of numbers" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isObject should correctly identify objects" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isPlainObject should only identify plain objects" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isString should correctly identify strings" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isNumber should correctly identify numbers" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isArray should correctly identify arrays" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isBinary should correctly identify binary objects" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isFunction should correctly identify functions" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isPromise should correctly identify promises" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Type Checking Utilities &gt; isArguments should correctly identify arguments objects" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Date Utilities &gt; formatDate should format dates according to provided patterns" time="0.023">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; keys should return the keys of an object" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; values should return the values of an object" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; mapObject should create an object with the same keys and mapped values" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; extend should merge properties from source into target, including getters and setters" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; pick should create an object composed of the picked properties" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; get should access a nested object field from a string" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; hasProperty should return true if the object has the specified property" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; reverseKeys should reverse a lookup object&apos;s keys and values" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="Object Utilities &gt; reverseKeys should reverse array values" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal strings" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal numbers" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different numbers" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal arrays" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for arrays with different order" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal Sets" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different Sets" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal Maps" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for identical RegExp" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different RegExp flags" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different RegExp" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for Maps with different content" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for deeply equal objects" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for objects with different structure" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal dates" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different dates" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for equal binary data" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different binary data" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for the same function reference" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for different functions" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return true for complex nested structures" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should return false for complex nested structures with differences" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; Various types &gt; should ignore non-enumerable properties by default" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="isEqual &gt; should return false for == values that arent equal" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="function utilities &gt; noop should not return anything" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="function utilities &gt; wrapFunction should return the same function if a function is passed" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="function utilities &gt; wrapFunction should return a function that returns the passed value if a non-function is passed" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="String Conversion &gt; should correctly convert kebab-case to camelCase" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="String Conversion &gt; should correctly convert camelCase to kebab-case" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="String Conversion &gt; should capitalize the first letter of each word" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="String Conversion &gt; should convert a string to title case" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; prettifyID &gt; should return &quot;0&quot; for input 0" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; prettifyID &gt; should convert a number to base 36 representation" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; prettifyID &gt; should handle large numbers correctly" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; hashCode &gt; should produce consistent hash code for the same input" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; hashCode &gt; should generally produce unique hash codes for different inputs" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; hashCode &gt; should hash objects" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; hashCode &gt; should hash dates" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; hashCode &gt; should hash numbers" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; generateID &gt; should generate a non-empty string" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="ID/Hashing Functions &gt; generateID &gt; generated IDs should be unique" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should clone dates" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should deeply clone an array" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should clone sets" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should clone RegExp objects" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should clone maps" time="0.014">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should clone deep objects" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="clone &gt; should handle circular dependencies" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="regular expression utilities &gt; should escape characters that have special meaning in regex" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; Array iteration &gt; should iterate over all elements" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; Array iteration &gt; should break early if the callback returns false" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; Object iteration &gt; should iterate over all properties" time="0.002">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; Object iteration &gt; should break early if the callback returns false" time="0">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; Object iteration &gt; should not iterate over non-enumerable properties" time="0.001">
        </testcase>
        <testcase classname="packages/utils/test/utils.test.js" name="each iterator utility &gt; should handle null/undefined gracefully" time="0">
        </testcase>
    </testsuite>
    <testsuite name="packages/reactivity/test/unit/reaction.test.js" timestamp="2024-02-13T16:45:46.144Z" hostname="VM" tests="14" failures="0" errors="0" skipped="0" time="0.052">
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Basic Usage &gt; should trigger reaction on reactive value change" time="0.026">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Basic Usage &gt; should handle firstRun and stop computation" time="0.002">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Equality &gt; should not re-run for identical objects with isEqual" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Equality &gt; should always re-run when custom isEqual returns false" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Controlling Reactivity &gt; should use guard to control reactivity" time="0.002">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Controlling Reactivity &gt; peek should not establish reactive dependency" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Controlling Reactivity &gt; nonreactive should prevent reactive updates within its scope" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Controlling Reactivity &gt; flush should process updates immediately" time="0.002">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Flushing &gt; afterFlush should call registered callbacks after flushing" time="0.004">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Flushing &gt; afterFlush should call multiple registered callbacks after flushing" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Helper Functions &gt; should correctly manipulate array with helpers" time="0.002">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Debugging &gt; Reaction should track current context for debugging" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Debugging &gt; Reaction should have no source on first run" time="0.002">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reaction.test.js" name="Reaction &gt; Debugging &gt; Reaction should track current stack trace with getSource" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="packages/reactivity/test/unit/reactive-var.test.js" timestamp="2024-02-13T16:45:46.160Z" hostname="VM" tests="31" failures="0" errors="0" skipped="0" time="0.054">
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Initialization &gt; provide value" time="0.019">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Initialization &gt; provide get and set helper" time="0.019">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Initialization &gt; should update and return the new value correctly" time="0.019">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Equality &gt; allow custom equality" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Equality &gt; identical objects shouldnt trigger reactivity" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Equality &gt; identical objects with different key order shouldnt trigger reactivity" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Reactivity &gt; should notify subscribers on value change" time="0.014">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Reactivity &gt; Peek should not trigger reactivity" time="0.014">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Reactivity &gt; Reactive variables should trigger nested dependencies" time="0.014">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; Push should push values" time="0.006">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; Unshift should add values to front of array" time="0.006">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; Splice should insert values" time="0.006">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; setIndex should change value at index" time="0.006">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; removeIndex should remove value at index" time="0.006">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; setArrayProperty should set an object property at index" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Array Utilities &gt; setArrayProperty should set all object properties when no index specified" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Transformation Helpers &gt; changeItems should change each item based on a map function" time="0">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Transformation Helpers &gt; removeItems should remove items based on a filter callback" time="0">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Boolean Helpers &gt; toggle should toggle a boolean" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Mutation Utilities &gt; changeItems should apply a transformation to each item" time="0">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; Mutation Utilities &gt; removeItems should remove items based on a filter" time="0">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Utilities &gt; getID should get id from an item" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Utilities &gt; getIDs should get all ids from an item" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Utilities &gt; hasID should match an item ID" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; setProperty should set the property of the item matching an id" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; getIndex should get the item with matching id" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; replaceItem should replace an item matching an ID" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; removeItem should remove an item matching an ID" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; setProperty should set the property of the item matching a given id" time="0.003">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; setArrayProperty should set an object property at index" time="0.001">
        </testcase>
        <testcase classname="packages/reactivity/test/unit/reactive-var.test.js" name="ReactiveVar &gt; ID Helpers &gt; setArrayProperty should set all object properties when no index specified" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="packages/query/test/dom/query.test.js" timestamp="2024-02-13T16:45:46.189Z" hostname="VM" tests="29" failures="0" errors="0" skipped="0" time="0.053">
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; selectors &gt; query should query DOM when given a selector" time="0.014">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; selectors &gt; query should allow dom elements to be passed in" time="0.004">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; selectors &gt; query should allow an array of elements to be passed in" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; find &gt; find should return all nested elements inside an element" time="0.003">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; find &gt; find should return all nested elements inside multiple elements" time="0.002">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; not &gt; not should filter out elements that match a selector" time="0.003">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; closest &gt; closest should return the closest parent matching a selector" time="0.002">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; closest &gt; closest should not return a parent if it does not match a selector" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; filter &gt; filter should return elements that match a selector" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; children &gt; children should return all children of an element" time="0.002">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; children &gt; children should return all children matching a selector" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; children &gt; children return an array of children when iterating over multiple elements" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; parent &gt; parent should return the parent of an element" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; parent &gt; parent should return the parent of an element matching a selector" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; parent &gt; parent should not return a parent if it does not match a selector" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; add class &gt; add class should add a class" time="0">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; add class &gt; add class should allow multiple classes to be added" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; add class &gt; add class should add multiple classes to multiple elements" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should attach an event handler to elements" time="0.003">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should attach an event handler to multiple elements" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should attach multiple event handlers to elements" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should return an array of event handlers when multiple attached" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should return a single event handler when only one attached" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should be able to remove event handlers using returned abortController" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should be able to use event delegation" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should be able to pass in custom abortController" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should have delegated set on return object is delegated" time="0">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should have delegated not set on return object is delegated" time="0.001">
        </testcase>
        <testcase classname="packages/query/test/dom/query.test.js" name="query &gt; on &gt; should return the native event on return object eventListener" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="packages/utils/test/dom/utils.test.js" timestamp="2024-02-13T16:45:46.209Z" hostname="VM" tests="1" failures="0" errors="0" skipped="0" time="0.005">
        <testcase classname="packages/utils/test/dom/utils.test.js" name="clone &gt; should clone dom nodes" time="0.003">
        </testcase>
    </testsuite>
</testsuites>
