name: Deploy CDN

on:
  push:
    tags:
      - 'v*'  # Push events to tags matching v*, i.e. v1.0, v20.15.10

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup CDN structure
        run: |
          # Extract version from the tag (remove the 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Preparing CDN for version $VERSION"
          
          # Create CDN directory structure
          mkdir -p cdn
          
          # Get the main package name from package.json
          MAIN_PACKAGE=$(node -p "require('./package.json').name.replace('@', '').replace('/', '-')")
          echo "Main package name: $MAIN_PACKAGE"

          # Get files to publish for the core package
          core_files_array=$(node -e "
            const pkg = require('./package.json');
            if (pkg.files && pkg.files.length > 0) {
              console.log(pkg.files.join(' '));
            } else {
              // Default if no files array
              console.log('src dist types README.md');
            }
          ")
          
          # Create core package directory
          mkdir -p cdn/@semantic-ui/core/$VERSION
          
          # Copy each directory/file from the files array
          for file_entry in $core_files_array; do
            if [ -e "$file_entry" ]; then
              if [ -d "$file_entry" ]; then
                # It's a directory, copy its contents
                mkdir -p "cdn/@semantic-ui/core/$VERSION/$file_entry"
                cp -r "$file_entry"/* "cdn/@semantic-ui/core/$VERSION/$file_entry/"
              else
                # It's a file, copy it
                cp "$file_entry" "cdn/@semantic-ui/core/$VERSION/"
              fi
              echo "Copied $file_entry for core package"
            else
              echo "Warning: $file_entry specified in package.json for core package but not found"
            fi
          done
          
          # Copy and update core package.json template
          cp $GITHUB_WORKSPACE/scripts/assets/templates/core-package.json.template cdn/@semantic-ui/core/$VERSION/package.json
          sed -i "s/CORE_VERSION/$VERSION/g" cdn/@semantic-ui/core/$VERSION/package.json
          
          # Process each package in packages directory
          cd packages
          for package in */; do
            # Remove trailing slash
            package_name=${package%/}
            
            # Read version from package.json
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            echo "Processing @semantic-ui/$package_name v$pkg_version"
            
            # Create directory in CDN structure
            mkdir -p ../cdn/@semantic-ui/$package_name/$pkg_version
            
            # Get files to publish from package.json
            files_array=$(node -e "
              const pkg = require('./$package_name/package.json');
              if (pkg.files && pkg.files.length > 0) {
                console.log(pkg.files.join(' '));
              } else {
                // Default if no files array
                console.log('src types README.md');
              }
            ")
            
            # Copy each directory/file from the files array
            for file_entry in $files_array; do
              if [ -e "$package_name/$file_entry" ]; then
                if [ -d "$package_name/$file_entry" ]; then
                  # It's a directory, copy its contents
                  mkdir -p "../cdn/@semantic-ui/$package_name/$pkg_version/$file_entry"
                  cp -r "$package_name/$file_entry"/* "../cdn/@semantic-ui/$package_name/$pkg_version/$file_entry/"
                else
                  # It's a file, copy it
                  cp "$package_name/$file_entry" "../cdn/@semantic-ui/$package_name/$pkg_version/"
                fi
                echo "Copied $file_entry for $package_name"
              else
                echo "Warning: $file_entry specified in package.json for $package_name but not found"
              fi
            done
            
            # Create package.json for the CDN version using template
            cp $GITHUB_WORKSPACE/scripts/assets/templates/package.json.template ../cdn/@semantic-ui/$package_name/$pkg_version/package.json
            
            # Replace placeholders in the package.json
            sed -i "s/PACKAGE_NAME/$package_name/g" ../cdn/@semantic-ui/$package_name/$pkg_version/package.json
            sed -i "s/PACKAGE_VERSION/$pkg_version/g" ../cdn/@semantic-ui/$package_name/$pkg_version/package.json
          done
          cd ..
          
          # Generate importmap for this version
          echo "Generating importmap for version $VERSION"
          
          # Copy the importmap template
          cp $GITHUB_WORKSPACE/scripts/assets/templates/importmap.json.template cdn/importmap-$VERSION.json
          
          # Get core package entrypoint
          core_entry=$(node -e "
            const pkg = require('./package.json');
            // Prioritize module over main for ESM
            let entry = pkg.module || pkg.main || 'index.js';
            // Remove 'src/' prefix if present as we're flattening in the CDN
            entry = entry.replace(/^src\//, '');
            console.log(entry);
          ")
          
          # Replace VERSION and update core entry point in importmap
          sed -i "s/VERSION/$VERSION/g" cdn/importmap-$VERSION.json
          sed -i "s|/index.js|/$core_entry|g" cdn/importmap-$VERSION.json
          
          # Create a temporary file with package imports
          package_imports=""
          cd packages
          for package in */; do
            package_name=${package%/}
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            # Get entrypoint from package.json
            pkg_entry=$(node -e "
              const pkg = require('./$package_name/package.json');
              // Prioritize module over main for ESM
              let entry = pkg.module || pkg.main || 'index.js';
              // Remove 'src/' prefix if present as we're flattening in the CDN
              entry = entry.replace(/^src\//, '');
              console.log(entry);
            ")
            
            # Add to package imports with comma and newline
            package_imports+=",\n    \"@semantic-ui/$package_name\": \"https://cdn.semantic-ui.com/@semantic-ui/$package_name/$pkg_version/$pkg_entry\""
          done
          cd ..
          
          # Replace the PACKAGE_IMPORTS placeholder
          # Using a temporary file to ensure proper line breaks and formatting
          echo "$package_imports" > cdn/package_imports.txt
          perl -i -pe 's|/\* PACKAGE_IMPORTS \*/|'"$(cat cdn/package_imports.txt)"'|' cdn/importmap-$VERSION.json
          rm cdn/package_imports.txt
          
          # Only update "latest" if this is not a test tag
          if [[ ! "$VERSION" == *"-"* ]]; then
            echo "This is a release version ($VERSION), updating latest importmap"
            cp cdn/importmap-$VERSION.json cdn/importmap-latest.json
          else
            echo "This is a test/pre-release version ($VERSION), not updating latest importmap"
            # If latest doesn't exist yet, create it
            if [ ! -f cdn/importmap-latest.json ]; then
              cp cdn/importmap-$VERSION.json cdn/importmap-latest.json
              echo "Created initial latest importmap (no previous version found)"
            fi
          fi
          
          # Create CNAME file for GitHub Pages
          echo "cdn.semantic-ui.com" > cdn/CNAME
          
          # Create README.md for the CDN using template
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn-readme.md.template cdn/README.md
          sed -i "s/VERSION/$VERSION/g" cdn/README.md
          
          # Create index file for the CDN root using template
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn-index.html.template cdn/index.html
          sed -i "s/VERSION/$VERSION/g" cdn/index.html

      - name: Create root documentation
        run: |
          # Create a temp directory for the root
          mkdir -p gh-pages-root
          
          # Copy GitHub Pages assets from scripts/assets
          cp $GITHUB_WORKSPACE/scripts/assets/gh-pages/README.md gh-pages-root/
          cp $GITHUB_WORKSPACE/scripts/assets/gh-pages/index.html gh-pages-root/
          
          # Replace version placeholders with actual version
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s/0.9.4/$VERSION/g" gh-pages-root/README.md
          sed -i "s/0.9.4/$VERSION/g" gh-pages-root/index.html

      - name: Deploy CDN to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: cdn
          clean: false  # Don't remove old files so we can keep multiple versions
          target-folder: cdn  # Deploy to the cdn subfolder of gh-pages branch
          
      - name: Deploy root documentation to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: gh-pages-root
          clean-exclude: cdn/**  # Don't clean the cdn subfolder
          target-folder: /  # Deploy to the root of gh-pages branch