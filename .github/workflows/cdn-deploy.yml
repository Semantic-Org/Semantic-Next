name: Deploy CDN

on:
  push:
    tags:
      - 'v*'  # Push events to tags matching v*, i.e. v1.0, v20.15.10

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup CDN structure
        run: |
          # Extract version from the tag (remove the 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Preparing CDN for version $VERSION"
          
          # Create CDN directory structure
          mkdir -p cdn
          
          # Get the main package name from package.json
          MAIN_PACKAGE=$(node -p "require('./package.json').name.replace('@', '').replace('/', '-')")
          echo "Main package name: $MAIN_PACKAGE"

          # Copy the main package
          mkdir -p cdn/@semantic-ui/core/$VERSION
          cp -r dist/* cdn/@semantic-ui/core/$VERSION/
          
          # Copy package.json to include metadata
          node -e "
            const pkg = require('./package.json');
            const cdn_pkg = {
              name: pkg.name,
              version: '$VERSION',
              description: pkg.description,
              author: pkg.author,
              license: pkg.license,
              main: 'index.js',
              module: 'index.js'
            };
            require('fs').writeFileSync('cdn/@semantic-ui/core/$VERSION/package.json', JSON.stringify(cdn_pkg, null, 2));
          "
          
          # Process each package in packages directory
          cd packages
          for package in */; do
            # Remove trailing slash
            package_name=${package%/}
            
            # Read version from package.json
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            echo "Processing @semantic-ui/$package_name v$pkg_version"
            
            # Create directory in CDN structure
            mkdir -p ../cdn/@semantic-ui/$package_name/$pkg_version
            
            # Copy source files to CDN
            cp -r $package_name/src/* ../cdn/@semantic-ui/$package_name/$pkg_version/
            
            # Copy type definitions if they exist
            if [ -d "$package_name/types" ]; then
              mkdir -p ../cdn/@semantic-ui/$package_name/$pkg_version/types
              cp -r $package_name/types/* ../cdn/@semantic-ui/$package_name/$pkg_version/types/
            fi
            
            # Create package.json for the CDN version
            cat > ../cdn/@semantic-ui/$package_name/$pkg_version/package.json << EOL
{
  "name": "@semantic-ui/$package_name",
  "version": "$pkg_version",
  "main": "index.js",
  "module": "index.js",
  "types": "types/index.d.ts"
}
EOL
          done
          cd ..
          
          # Generate importmap for this version
          echo "Generating importmap for version $VERSION"
          
          # Create importmap
          echo "{" > cdn/importmap-$VERSION.json
          echo "  \"imports\": {" >> cdn/importmap-$VERSION.json
          
          # Add core package
          echo "    \"@semantic-ui/core\": \"https://cdn.semantic-ui.com/@semantic-ui/core/$VERSION/index.js\"," >> cdn/importmap-$VERSION.json
          
          # Process each package for importmap
          cd packages
          packages=()
          for package in */; do
            package_name=${package%/}
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            packages+=("$package_name")
            
            # Add to importmap
            echo "    \"@semantic-ui/$package_name\": \"https://cdn.semantic-ui.com/@semantic-ui/$package_name/$pkg_version/index.js\"," >> ../cdn/importmap-$VERSION.json
          done
          
          # Remove trailing comma from last entry and close the JSON
          sed -i '$ s/,$//' ../cdn/importmap-$VERSION.json
          echo "  }" >> ../cdn/importmap-$VERSION.json
          echo "}" >> ../cdn/importmap-$VERSION.json
          
          # Copy to latest.json as well
          cp ../cdn/importmap-$VERSION.json ../cdn/importmap-latest.json
          cd ..
          
          # Create CNAME file for GitHub Pages
          echo "cdn.semantic-ui.com" > cdn/CNAME
          
          # Create README.md for the CDN
          cat > cdn/README.md << EOL
# Semantic UI CDN

This is the CDN for [Semantic UI Next](https://github.com/semantic-org/semantic-ui-next).

## Usage

You can import packages directly from this CDN in your web applications:

\`\`\`html
<script type="module">
  import { createSignal } from 'https://cdn.semantic-ui.com/@semantic-ui/reactivity/$VERSION/index.js';
</script>
\`\`\`

## Import Maps

For a better developer experience, use our import maps:

\`\`\`html
<script type="importmap" src="https://cdn.semantic-ui.com/importmap-latest.json"></script>
<script type="module">
  import { createSignal } from '@semantic-ui/reactivity';
  
  // Your code here
</script>
\`\`\`

## Available Versions

Each package is versioned independently. The core package is currently at version $VERSION.

## Documentation

For full documentation, visit [semantic-ui.com](https://semantic-ui.com).
EOL

          # Create index file for the CDN root
          cat > cdn/index.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Semantic UI CDN</title>
  <style>
    body { font-family: system-ui, -apple-system, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; }
    h1 { color: #2185d0; }
    h2 { margin-top: 2rem; }
    ul { padding-left: 1.5rem; }
    li { margin-bottom: 0.5rem; }
    code { background: #f5f5f5; padding: 0.2rem 0.4rem; border-radius: 3px; }
    pre { background: #f5f5f5; padding: 1rem; border-radius: 5px; overflow-x: auto; }
    .example { margin: 2rem 0; }
  </style>
</head>
<body>
  <h1>Semantic UI CDN</h1>
  <p>This is the CDN for Semantic UI Next. You can import packages directly or use an importmap.</p>
  
  <h2>Direct Import</h2>
  <p>Import specific packages directly:</p>
  <pre><code>import { createSignal } from 'https://cdn.semantic-ui.com/@semantic-ui/reactivity/$VERSION/index.js';</code></pre>
  
  <h2>Using ImportMap</h2>
  <p>For a better developer experience, use our importmap:</p>
  <div class="example">
    <pre><code>&lt;script type="importmap" src="https://cdn.semantic-ui.com/importmap-latest.json"&gt;&lt;/script&gt;
&lt;script type="module"&gt;
  import { createSignal } from '@semantic-ui/reactivity';
  
  // Your code here
&lt;/script&gt;</code></pre>
  </div>
  
  <p>You can also use a specific version:</p>
  <pre><code>&lt;script type="importmap" src="https://cdn.semantic-ui.com/importmap-$VERSION.json"&gt;&lt;/script&gt;</code></pre>
  
  <h2>Available Packages:</h2>
  <ul id="packages"></ul>
  
  <script>
    // Dynamically generate package list
    async function getDirectories() {
      try {
        const response = await fetch('.');
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const links = Array.from(doc.querySelectorAll('a'))
          .map(a => a.href)
          .filter(href => href.includes('@semantic-ui/'));
        
        const packagesList = document.getElementById('packages');
        const uniquePackages = [...new Set(links.map(href => {
          const parts = href.split('/');
          return parts.slice(0, parts.length - 2).join('/');
        }))]
        .filter(pkg => pkg.includes('@semantic-ui/'));
        
        uniquePackages.forEach(pkg => {
          const li = document.createElement('li');
          const parts = pkg.split('/');
          const packageName = parts[parts.length - 1];
          li.innerHTML = \`<a href="\${pkg}/">\${packageName}</a>\`;
          packagesList.appendChild(li);
        });
      } catch (e) {
        console.error(e);
      }
    }
    
    getDirectories();
  </script>
</body>
</html>
EOL

      - name: Create root documentation
        run: |
          # Create a temp directory for the root
          mkdir -p gh-pages-root
          
          # Copy GitHub Pages assets from scripts/assets
          cp scripts/assets/gh-pages/README.md gh-pages-root/
          cp scripts/assets/gh-pages/index.html gh-pages-root/
          
          # Replace version placeholders with actual version
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s/0.9.4/$VERSION/g" gh-pages-root/README.md
          sed -i "s/0.9.4/$VERSION/g" gh-pages-root/index.html

      - name: Deploy CDN to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: cdn
          clean: false  # Don't remove old files so we can keep multiple versions
          target-folder: cdn  # Deploy to the cdn subfolder of gh-pages branch
          
      - name: Deploy root documentation to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: gh-pages-root
          clean-exclude: cdn/**  # Don't clean the cdn subfolder
          target-folder: /  # Deploy to the root of gh-pages branch