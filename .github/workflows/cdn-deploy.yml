name: Deploy CDN

on:
  push:
    tags:
      - 'v*'  # Push events to tags matching v*, i.e. v1.0, v20.15.10

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup CDN structure
        run: |
          # Extract version from the tag (remove the 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Preparing CDN for version $VERSION"
          
          # Create CDN directory structure
          mkdir -p cdn
          
          # Create images directory and copy logo
          mkdir -p cdn/images
          cp $GITHUB_WORKSPACE/scripts/assets/images/logo.png cdn/images/
          
          # Get the main package name from package.json
          MAIN_PACKAGE=$(node -p "require('./package.json').name.replace('@', '').replace('/', '-')")
          echo "Main package name: $MAIN_PACKAGE"

          # Get files to publish for the core package
          core_files_array=$(node -e "
            const pkg = require('./package.json');
            if (pkg.files && pkg.files.length > 0) {
              console.log(pkg.files.join(' '));
            } else {
              // Default if no files array
              console.log('src dist types README.md');
            }
          ")
          
          # Get the core package version from package.json
          CORE_VERSION=$(node -p "require('./package.json').version")
          echo "Core package version from package.json: $CORE_VERSION"
          
          # Create core package directory using the version from package.json
          mkdir -p cdn/@semantic-ui/core/$CORE_VERSION
          
          # Copy specified directories/files, preserving the exact directory structure
          for file_entry in $core_files_array; do
            if [ -e "$file_entry" ]; then
              if [ -d "$file_entry" ]; then
                # It's a directory, preserve the directory structure exactly
                mkdir -p "cdn/@semantic-ui/core/$CORE_VERSION/$file_entry"
                # Use cp -R to copy recursively, preserving the structure
                cp -R "$file_entry" "cdn/@semantic-ui/core/$CORE_VERSION/$(dirname "$file_entry")/"
              else
                # It's a file, make sure its directory exists
                dir_path=$(dirname "$file_entry")
                mkdir -p "cdn/@semantic-ui/core/$CORE_VERSION/$dir_path"
                # Copy the file to the correct path
                cp "$file_entry" "cdn/@semantic-ui/core/$CORE_VERSION/$file_entry"
              fi
              echo "Copied $file_entry for core package"
            else
              echo "Warning: $file_entry specified in package.json for core package but not found"
            fi
          done
          
          # Copy the actual package.json file
          cp package.json cdn/@semantic-ui/core/$CORE_VERSION/package.json
          
          # Create index.js and index.html files for the core package using templates
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/core-index.js.template cdn/@semantic-ui/core/$CORE_VERSION/index.js
          # Use perl instead of sed for better handling of special characters
          perl -i -pe "s|CORE_ENTRY|$core_entry|g" cdn/@semantic-ui/core/$CORE_VERSION/index.js
          
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/core-index.html.template cdn/@semantic-ui/core/$CORE_VERSION/index.html
          perl -i -pe "s|CORE_VERSION|$CORE_VERSION|g" cdn/@semantic-ui/core/$CORE_VERSION/index.html
          perl -i -pe "s|CORE_ENTRY|$core_entry|g" cdn/@semantic-ui/core/$CORE_VERSION/index.html
          
          # Process each package in packages directory
          cd packages
          for package in */; do
            # Remove trailing slash
            package_name=${package%/}
            
            # Read version from package.json
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            echo "Processing @semantic-ui/$package_name v$pkg_version"
            
            # Create directory in CDN structure
            mkdir -p ../cdn/@semantic-ui/$package_name/$pkg_version
            
            # Get files to publish from package.json
            files_array=$(node -e "
              const pkg = require('./$package_name/package.json');
              if (pkg.files && pkg.files.length > 0) {
                console.log(pkg.files.join(' '));
              } else {
                // Default if no files array
                console.log('src types README.md');
              }
            ")
            
            # Copy each directory/file from the files array, preserving the exact directory structure
            for file_entry in $files_array; do
              if [ -e "$package_name/$file_entry" ]; then
                if [ -d "$package_name/$file_entry" ]; then
                  # It's a directory, preserve the directory structure exactly
                  mkdir -p "../cdn/@semantic-ui/$package_name/$pkg_version/$file_entry"
                  # Use cp -R to copy recursively, preserving the structure
                  cp -R "$package_name/$file_entry" "../cdn/@semantic-ui/$package_name/$pkg_version/$(dirname "$file_entry")/"
                else
                  # It's a file, make sure its directory exists
                  dir_path=$(dirname "$file_entry")
                  mkdir -p "../cdn/@semantic-ui/$package_name/$pkg_version/$dir_path"
                  # Copy the file to the correct path
                  cp "$package_name/$file_entry" "../cdn/@semantic-ui/$package_name/$pkg_version/$file_entry"
                fi
                echo "Copied $file_entry for $package_name"
              else
                echo "Warning: $file_entry specified in package.json for $package_name but not found"
              fi
            done
            
            # Copy the actual package.json file
            cp "$package_name/package.json" "../cdn/@semantic-ui/$package_name/$pkg_version/package.json"

            # Get entrypoint from package.json for redirection
            pkg_entry=$(node -e "
              const pkg = require('./$package_name/package.json');
              // Prioritize module over main for ESM
              let entry = pkg.module || pkg.main || 'index.js';
              console.log(entry);
            ")
            
            # Create index.js and index.html files using templates
            cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/package-index.js.template "../cdn/@semantic-ui/$package_name/$pkg_version/index.js"
            # Use perl instead of sed for better handling of special characters
            perl -i -pe "s|PACKAGE_ENTRY|$pkg_entry|g" "../cdn/@semantic-ui/$package_name/$pkg_version/index.js"
            
            cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/package-index.html.template "../cdn/@semantic-ui/$package_name/$pkg_version/index.html"
            perl -i -pe "s|PACKAGE_NAME|$package_name|g" "../cdn/@semantic-ui/$package_name/$pkg_version/index.html"
            perl -i -pe "s|PACKAGE_VERSION|$pkg_version|g" "../cdn/@semantic-ui/$package_name/$pkg_version/index.html"
            perl -i -pe "s|PACKAGE_ENTRY|$pkg_entry|g" "../cdn/@semantic-ui/$package_name/$pkg_version/index.html"
          done
          cd ..
          
          # Generate importmap for this version
          echo "Generating importmap for version $VERSION"
          
          # Get core package entrypoint
          core_entry=$(node -e "
            const pkg = require('./package.json');
            // Prioritize module over main for ESM
            let entry = pkg.module || pkg.main || 'index.js';
            console.log(entry);
          ")
          
          # Collect all package information for importmap generation
          echo "Collecting package information for importmap..."
          
          # Copy and use the importmap generation script from templates
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/generate-importmap.js.template generate-importmap.js
          
          # Execute the importmap generation script
          echo "Executing importmap generation script..."
          VERSION=$VERSION CORE_VERSION=$CORE_VERSION CORE_ENTRY=$core_entry node generate-importmap.js
          rm generate-importmap.js
          
          # The importmap generation script also handles the latest importmap update logic
          
          # Create CNAME file for GitHub Pages
          echo "cdn.semantic-ui.com" > cdn/CNAME
          
          # Create package root redirect files that point to latest version folders
          echo "Creating package root redirects to latest versions..."
          
          # Create redirects for core package
          mkdir -p cdn/@semantic-ui/core
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/core-redirect.html.template cdn/@semantic-ui/core/index.html
          perl -i -pe "s|CORE_VERSION|$CORE_VERSION|g" cdn/@semantic-ui/core/index.html
          
          # Create redirects for each package
          cd packages
          for package in */; do
            package_name=${package%/}
            pkg_version=$(node -p "require('./$package_name/package.json').version")
            
            echo "Creating redirect for @semantic-ui/$package_name to version $pkg_version"
            
            mkdir -p "../cdn/@semantic-ui/$package_name"
            cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/package-redirect.html.template "../cdn/@semantic-ui/$package_name/index.html"
            perl -i -pe "s|PACKAGE_NAME|@semantic-ui/$package_name|g" "../cdn/@semantic-ui/$package_name/index.html"
            perl -i -pe "s|PACKAGE_VERSION|$pkg_version|g" "../cdn/@semantic-ui/$package_name/index.html"
          done
          cd ..
          
          # Copy the importmap loader to the CDN root with new name
          echo "Copying importmap loader to CDN root..."
          cp $GITHUB_WORKSPACE/scripts/assets/templates/cdn/importmap-loader.js.template cdn/importmap.js
          
          # Get Lit version from peerDependencies
          echo "Getting Lit version from package.json peerDependencies..."
          LIT_VERSION=$(node -e "
            const pkg = require('./package.json');
            const litVersion = pkg.peerDependencies && pkg.peerDependencies.lit 
              ? pkg.peerDependencies.lit.replace(/[^0-9.]/g, '')
              : '3.0.0';  // fallback to stable version if not specified
            console.log(litVersion);
          ")
          echo "Using Lit version: $LIT_VERSION"
          
          # Download and bundle Lit dependency
          echo "Downloading Lit dependency from unpkg..."
          mkdir -p cdn/lit
          
          # Use curl to download the Lit package with specific version
          curl -s "https://www.unpkg.com/lit@$LIT_VERSION/index.js" > cdn/lit/index.js
          
          # Add Lit to our importmap
          echo "Adding Lit to importmap..."
          cd cdn
          # Create a temporary script to add Lit to existing importmaps
          cat > add-lit-to-importmap.js << 'EOF'
          const fs = require('fs');
          const files = fs.readdirSync('.').filter(f => f.startsWith('importmap-') && f.endsWith('.json'));
          files.forEach(file => {
            const importmap = JSON.parse(fs.readFileSync(file, 'utf8'));
            if (!importmap.imports.lit) {
              importmap.imports.lit = 'https://cdn.semantic-ui.com/lit/index.js';
              fs.writeFileSync(file, JSON.stringify(importmap, null, 2));
              console.log(`Added Lit to ${file}`);
            }
          });
          EOF
          node add-lit-to-importmap.js
          rm add-lit-to-importmap.js
          cd ..
          
          # Create README.md for the CDN using the gh-pages README (better formatted)
          cp $GITHUB_WORKSPACE/scripts/assets/gh-pages/README.md cdn/README.md
          # Update the version references in the README
          sed -i "s/0.9.4/$VERSION/g" cdn/README.md
          
          # Create index file for the CDN root using the gh-pages version (better formatted)
          cp $GITHUB_WORKSPACE/scripts/assets/gh-pages/index.html cdn/index.html
          # Update version references in the index.html
          sed -i "s/0.9.4/$VERSION/g" cdn/index.html
          # Fix the CDN link reference - remove the /cdn/ part since files are at root now
          sed -i 's|<li><a href="/cdn/">CDN for packages</a></li>|<li><a href="/">CDN for packages</a></li>|' cdn/index.html
          sed -i 's|<a href="/cdn/" class="btn">Explore the CDN</a>|<a href="/" class="btn">Explore the CDN</a>|' cdn/index.html
          
          # Add importmap information to the README
          sed -i '/## Usage/a\\\n### Using Importmaps\\\n\\\nFor the best developer experience, we recommend using importmaps with Semantic UI Next. There are two main approaches:\\\n\\\n#### 1. Inline Importmap (Recommended)\\\n\\\nFor the best compatibility, inline the importmap directly in your HTML:\\\n\\\n```html\\\n<script type="importmap">\\\n{\\\n  "imports": {\\\n    "@semantic-ui/core": "https://cdn.semantic-ui.com/@semantic-ui/core/0.10.0/src/semantic-ui.js",\\\n    "@semantic-ui/reactivity": "https://cdn.semantic-ui.com/@semantic-ui/reactivity/0.10.0/src/index.js",\\\n    "lit": "https://cdn.semantic-ui.com/lit/index.js"\\\n    // ... add other packages as needed\\\n  }\\\n}\\\n</script>\\\n```\\\n\\\nYou can copy the full importmap from [importmap-latest.json](https://cdn.semantic-ui.com/importmap-latest.json).\\\n\\\n#### 2. Using the Importmap Loader\\\n\\\nFor a more dynamic approach, use our importmap loader script:\\\n\\\n```html\\\n<script src="https://cdn.semantic-ui.com/importmap.js"></script>\\\n```\\\n\\\nThis automatically loads the importmap with all packages and dependencies included. You can listen for the `importmap-ready` event to know when the importmap has been loaded:\\\n\\\n```javascript\\\nwindow.addEventListener("importmap-ready", (event) => {\\\n  console.log("Importmap is ready", event.detail.importmap);\\\n  // Start importing your modules\\\n});\\\n```' cdn/README.md
      # Verify deployment structure is ready
      - name: Verify deployment structure
        run: |
          # Debug what's being deployed
          echo "Content of cdn directory (root):"
          ls -la cdn/
          
          # Verify CNAME file exists
          if [ ! -f "cdn/CNAME" ]; then
            echo "CNAME file missing, creating it"
            echo "cdn.semantic-ui.com" > cdn/CNAME
          fi
          
          if [ -d "cdn/@semantic-ui" ]; then
            echo "Content of cdn/@semantic-ui:"
            ls -la cdn/@semantic-ui/ | head -n 10
          fi

      # Upload CDN artifact for deployment
      - name: Upload CDN artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./cdn
          name: github-pages
          # Don't clean up existing files - this is critical for maintaining previous versions
          # The GitHub Pages action will merge the content with existing files
          # rather than replacing everything

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This deployment preserves files not included in this artifact
        # which allows us to maintain all historical package versions